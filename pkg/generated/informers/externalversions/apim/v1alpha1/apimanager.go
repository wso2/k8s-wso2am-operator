/*
 * Copyright (c) 2019 WSO2 Inc. (http:www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	apimv1alpha1 "github.com/keshiha96/wso2am-k8s-controller/pkg/apis/apim/v1alpha1"
	versioned "github.com/keshiha96/wso2am-k8s-controller/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/keshiha96/wso2am-k8s-controller/pkg/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/keshiha96/wso2am-k8s-controller/pkg/generated/listers/apim/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ApimanagerInformer provides access to a shared informer and lister for
// Apimanagers.
type ApimanagerInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ApimanagerLister
}

type apimanagerInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewApimanagerInformer constructs a new informer for Apimanager type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewApimanagerInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredApimanagerInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredApimanagerInformer constructs a new informer for Apimanager type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredApimanagerInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApimV1alpha1().Apimanagers(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApimV1alpha1().Apimanagers(namespace).Watch(options)
			},
		},
		&apimv1alpha1.Apimanager{},
		resyncPeriod,
		indexers,
	)
}

func (f *apimanagerInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredApimanagerInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *apimanagerInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apimv1alpha1.Apimanager{}, f.defaultInformer)
}

func (f *apimanagerInformer) Lister() v1alpha1.ApimanagerLister {
	return v1alpha1.NewApimanagerLister(f.Informer().GetIndexer())
}
